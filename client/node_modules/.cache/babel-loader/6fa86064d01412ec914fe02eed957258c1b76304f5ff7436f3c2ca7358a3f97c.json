{"ast":null,"code":"var _jsxFileName = \"/home/hp/monday-oauth (copy)/client/src/components/CreateColumn.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateColumn() {\n  let columnIDs = [];\n  const createColumns = async () => {\n    const columnsToCreate = ['Invoice Number', 'Reference', 'Status', 'Amount Due'];\n    let createdColumnsCount = 0;\n    let columnsExist = false;\n    try {\n      const response = await fetch(\"https://api.monday.com/v2\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `${token}`\n        },\n        body: JSON.stringify({\n          query: `\n                {\n                  boards(ids: ${boardId}) {\n                    columns {\n                      id\n                      title\n                    }\n                  }\n                }\n              `\n        })\n      });\n      const res = await response.json();\n      const existingColumns = res.data.boards[0].columns.map(column => column.title);\n      for (const columnName of columnsToCreate) {\n        if (!existingColumns.includes(columnName)) {\n          const query = `\n                mutation {\n                  create_column (\n                    board_id: ${boardId},\n                    title: \"${columnName}\",\n                    column_type: text\n                  ) {\n                    id\n                  }\n                }\n              `;\n          try {\n            const response = await fetch(\"https://api.monday.com/v2\", {\n              method: 'post',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `${token}`\n              },\n              body: JSON.stringify({\n                'query': query\n              })\n            });\n            const res = await response.json();\n            const {\n              id\n            } = res.data.create_column;\n            console.log(`Created column '${columnName}':`, id);\n            columnIDs.push({\n              columnName,\n              id\n            });\n            createdColumnsCount++;\n            if (createdColumnsCount === columnsToCreate.length) {\n              window.alert('All columns created successfully!');\n            }\n          } catch (error) {\n            console.error(`Error creating column '${columnName}':`, error);\n          }\n        } else {\n          console.log(`Column '${columnName}' already exists.`);\n          columnsExist = true;\n        }\n      }\n      if (columnsExist) {\n        window.alert('Columns already exist.');\n      }\n    } catch (error) {\n      console.error('Error fetching columns:', error);\n      window.alert('Failed to create columns. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"CreateColumn\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_c = CreateColumn;\nvar _c;\n$RefreshReg$(_c, \"CreateColumn\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CreateColumn","columnIDs","createColumns","columnsToCreate","createdColumnsCount","columnsExist","response","fetch","method","headers","token","body","JSON","stringify","query","boardId","res","json","existingColumns","data","boards","columns","map","column","title","columnName","includes","id","create_column","console","log","push","length","window","alert","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hp/monday-oauth (copy)/client/src/components/CreateColumn.js"],"sourcesContent":["import React from 'react'\n\nexport default function CreateColumn() {\n    let columnIDs = [];\n\n    const createColumns = async () => {\n\n        const columnsToCreate = ['Invoice Number', 'Reference', 'Status', 'Amount Due'];\n        let createdColumnsCount = 0;\n        let columnsExist = false;\n    \n        try {\n          const response = await fetch(\"https://api.monday.com/v2\", {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `${token}`,\n            },\n            body: JSON.stringify({\n              query: `\n                {\n                  boards(ids: ${boardId}) {\n                    columns {\n                      id\n                      title\n                    }\n                  }\n                }\n              `,\n            }),\n          });\n          const res = await response.json();\n    \n          const existingColumns = res.data.boards[0].columns.map(column => column.title);\n    \n          for (const columnName of columnsToCreate) {\n            if (!existingColumns.includes(columnName)) {\n              const query = `\n                mutation {\n                  create_column (\n                    board_id: ${boardId},\n                    title: \"${columnName}\",\n                    column_type: text\n                  ) {\n                    id\n                  }\n                }\n              `;\n    \n              try {\n                const response = await fetch(\"https://api.monday.com/v2\", {\n                  method: 'post',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `${token}`,\n                  },\n                  body: JSON.stringify({\n                    'query': query,\n                  }),\n                });\n                const res = await response.json();\n    \n                const { id } = res.data.create_column;\n                console.log(`Created column '${columnName}':`, id);\n                columnIDs.push({ columnName, id });\n    \n                createdColumnsCount++;\n    \n                if (createdColumnsCount === columnsToCreate.length) {\n                  window.alert('All columns created successfully!');\n                }\n              } catch (error) {\n                console.error(`Error creating column '${columnName}':`, error);\n              }\n            } else {\n              console.log(`Column '${columnName}' already exists.`);\n              columnsExist = true;\n            }\n          }\n    \n          if (columnsExist) {\n            window.alert('Columns already exist.');\n          }\n        } catch (error) {\n          console.error('Error fetching columns:', error);\n          window.alert('Failed to create columns. Please try again.');\n        }\n    \n      };\n  return (\n    <div>CreateColumn</div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}