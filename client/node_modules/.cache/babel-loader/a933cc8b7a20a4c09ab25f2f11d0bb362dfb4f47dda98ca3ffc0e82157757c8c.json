{"ast":null,"code":"var _jsxFileName = \"/home/hp/monday-oauth (copy)/client/src/components/CreateColumn.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateColumn() {\n  let columnIDs = [];\n  const createColumns = async () => {\n    const columnsToCreate = ['Invoice Number', 'Reference', 'Status', 'Amount Due'];\n    let createdColumnsCount = 0;\n    let columnsExist = false;\n    try {\n      const response = await fetch(\"https://api.monday.com/v2\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `${token}`\n        },\n        body: JSON.stringify({\n          query: `\n                {\n                  boards(ids: ${boardId}) {\n                    columns {\n                      id\n                      title\n                    }\n                  }\n                }\n              `\n        })\n      });\n      const res = await response.json();\n      const existingColumns = res.data.boards[0].columns.map(column => column.title);\n      for (const columnName of columnsToCreate) {\n        if (!existingColumns.includes(columnName)) {\n          const query = `\n                mutation {\n                  create_column (\n                    board_id: ${boardId},\n                    title: \"${columnName}\",\n                    column_type: text\n                  ) {\n                    id\n                  }\n                }\n              `;\n          try {\n            const response = await fetch(\"https://api.monday.com/v2\", {\n              method: 'post',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `${token}`\n              },\n              body: JSON.stringify({\n                'query': query\n              })\n            });\n            const res = await response.json();\n            const {\n              id\n            } = res.data.create_column;\n            console.log(`Created column '${columnName}':`, id);\n            columnIDs.push({\n              columnName,\n              id\n            });\n            createdColumnsCount++;\n            if (createdColumnsCount === columnsToCreate.length) {\n              window.alert('All columns created successfully!');\n            }\n          } catch (error) {\n            console.error(`Error creating column '${columnName}':`, error);\n          }\n        } else {\n          console.log(`Column '${columnName}' already exists.`);\n          columnsExist = true;\n        }\n      }\n      if (columnsExist) {\n        window.alert('Columns already exist.');\n      }\n    } catch (error) {\n      console.error('Error fetching columns:', error);\n      window.alert('Failed to create columns. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"card justify-content-center align-items-center d-grid border-0 shadow\",\n      style: {\n        width: '18 rem',\n        height: '300px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-body \",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"fw-bold mb-3 card-title \",\n          children: \"Create columns on monday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createColumns,\n          className: \" btn btn-primary\",\n          children: \"Create Columns\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n_c = CreateColumn;\nvar _c;\n$RefreshReg$(_c, \"CreateColumn\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CreateColumn","columnIDs","createColumns","columnsToCreate","createdColumnsCount","columnsExist","response","fetch","method","headers","token","body","JSON","stringify","query","boardId","res","json","existingColumns","data","boards","columns","map","column","title","columnName","includes","id","create_column","console","log","push","length","window","alert","error","children","class","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","_c","$RefreshReg$"],"sources":["/home/hp/monday-oauth (copy)/client/src/components/CreateColumn.js"],"sourcesContent":["import React from 'react'\n\nexport default function CreateColumn() {\n    let columnIDs = [];\n\n    const createColumns = async () => {\n\n        const columnsToCreate = ['Invoice Number', 'Reference', 'Status', 'Amount Due'];\n        let createdColumnsCount = 0;\n        let columnsExist = false;\n\n        try {\n            const response = await fetch(\"https://api.monday.com/v2\", {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `${token}`,\n                },\n                body: JSON.stringify({\n                    query: `\n                {\n                  boards(ids: ${boardId}) {\n                    columns {\n                      id\n                      title\n                    }\n                  }\n                }\n              `,\n                }),\n            });\n            const res = await response.json();\n\n            const existingColumns = res.data.boards[0].columns.map(column => column.title);\n\n            for (const columnName of columnsToCreate) {\n                if (!existingColumns.includes(columnName)) {\n                    const query = `\n                mutation {\n                  create_column (\n                    board_id: ${boardId},\n                    title: \"${columnName}\",\n                    column_type: text\n                  ) {\n                    id\n                  }\n                }\n              `;\n\n                    try {\n                        const response = await fetch(\"https://api.monday.com/v2\", {\n                            method: 'post',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `${token}`,\n                            },\n                            body: JSON.stringify({\n                                'query': query,\n                            }),\n                        });\n                        const res = await response.json();\n\n                        const { id } = res.data.create_column;\n                        console.log(`Created column '${columnName}':`, id);\n                        columnIDs.push({ columnName, id });\n\n                        createdColumnsCount++;\n\n                        if (createdColumnsCount === columnsToCreate.length) {\n                            window.alert('All columns created successfully!');\n                        }\n                    } catch (error) {\n                        console.error(`Error creating column '${columnName}':`, error);\n                    }\n                } else {\n                    console.log(`Column '${columnName}' already exists.`);\n                    columnsExist = true;\n                }\n            }\n\n            if (columnsExist) {\n                window.alert('Columns already exist.');\n            }\n        } catch (error) {\n            console.error('Error fetching columns:', error);\n            window.alert('Failed to create columns. Please try again.');\n        }\n\n    };\n\n    return (\n        <div>\n             <div class=\"card justify-content-center align-items-center d-grid border-0 shadow\" style={{ width: '18 rem', height: '300px' }}>\n                  <div class=\"card-body \">\n                    <h2 class=\"fw-bold mb-3 card-title \">Create columns on monday</h2>\n                    <button onClick={createColumns} className=\" btn btn-primary\">\n                      Create Columns\n                    </button>\n                  </div>\n                </div>\n        </div>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}